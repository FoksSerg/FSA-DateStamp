#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FSA-DateStamp - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Windows, macOS –∏ Linux

–í–µ—Ä—Å–∏—è: 1.01.25.249 (6 —Å–µ–Ω—Ç—è–±—Ä—è 2025)
–ö–æ–º–ø–∞–Ω–∏—è: AW-Software
–ê–≤—Ç–æ—Ä: –°–µ—Ä–≥–µ–π –§–æ–∫–∏–Ω @FoksSerg
Email: foks_serg@mail.ru

–°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: X.YY.ZZ.DDD
- X - –º–∞–∂–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è (1)
- YY - –º–∏–Ω–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è (01)
- ZZ - –≥–æ–¥ (25 = 2025)
- DDD - –¥–µ–Ω—å –≥–æ–¥–∞ (249 = 6 —Å–µ–Ω—Ç—è–±—Ä—è)
"""

import os
import sys
import platform
import subprocess
import shutil
from pathlib import Path
from datetime import datetime

class InstallerBuilder:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–æ–≤ –Ω–∞ –≤—Å–µ—Ö –û–°"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.installer_dir = Path(__file__).parent
        self.dist_dir = self.project_root / "Distrib" / "dist"
        self.current_os = platform.system().lower()
        self.version = self.get_version()
        
        print(f"üîß FSA-DateStamp Installer Builder")
        print(f"üì± –¢–µ–∫—É—â–∞—è –û–°: {platform.system()} ({self.current_os})")
        print(f"üì¶ –í–µ—Ä—Å–∏—è: {self.version}")
        print(f"üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root}")
        print(f"üìÅ –ü–∞–ø–∫–∞ –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–æ–≤: {self.installer_dir}")
        print("-" * 50)
    
    def get_version(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ version.txt –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ version.txt
            version_file = self.project_root / "version.txt"
            if version_file.exists():
                with open(version_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    # –ò—â–µ–º –≤–µ—Ä—Å–∏—é –≤ version.txt
                    for line in content.split('\n'):
                        if 'prodvers=' in line or 'ProductVersion' in line:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ prodvers=(1, 1, 25, 249)
                            if 'prodvers=' in line:
                                version_part = line.split('prodvers=')[1].split(')')[0]
                                version = version_part.replace('(', '').replace(')', '').replace(',', '.').replace(' ', '')
                                return version
                            # –ò–ª–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ StringStruct(u'ProductVersion', u'1.01.25.249')
                            elif 'ProductVersion' in line:
                                version_part = line.split("u'ProductVersion', u'")[1].split("')")[0]
                                return version_part
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ version.txt: {e}")
        
        return "1.01.25.249"
    
    def build_installer(self, target_os=None):
        """–°–±–æ—Ä–∫–∞ –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –û–° –∏–ª–∏ —Ç–µ–∫—É—â–µ–π"""
        target_os = target_os or self.current_os
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞ –¥–ª—è {target_os.upper()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if not self.check_built_application():
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Build.py")
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ —Å–±–æ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
        if target_os == "windows":
            return self.build_windows_installer()
        elif target_os == "darwin":  # macOS
            return self.build_macos_installer()
        elif target_os == "linux":
            return self.build_linux_installer()
        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {target_os}")
            return False
    
    def check_built_application(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.current_os == "windows":
            exe_path = self.project_root / "Distrib" / "Windows" / "FSA-DateStamp.exe"
            return exe_path.exists()
        elif self.current_os == "darwin":  # macOS
            app_path = self.project_root / "Distrib" / "MacOS" / "FSA-DateStamp.app"
            return app_path.exists()
        elif self.current_os == "linux":
            binary_path = self.project_root / "Distrib" / "Linux" / "FSA-DateStamp"
            return binary_path.exists()
        return False
    
    def build_windows_installer(self):
        """–°–±–æ—Ä–∫–∞ Windows –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ Inno Setup"""
        print("ü™ü –°–±–æ—Ä–∫–∞ Windows –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è Windows –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞
        windows_dir = self.installer_dir / "Windows"
        windows_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º Inno Setup —Å–∫—Ä–∏–ø—Ç
        iss_content = self.create_inno_setup_script()
        iss_file = windows_dir / "installer.iss"
        
        with open(iss_file, 'w', encoding='utf-8') as f:
            f.write(iss_content)
        
        print(f"üìù –°–æ–∑–¥–∞–Ω Inno Setup —Å–∫—Ä–∏–ø—Ç: {iss_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Inno Setup
        iscc_path = self.check_inno_setup()
        if not iscc_path:
            print("‚ùå Inno Setup –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Inno Setup 6.0+")
            print("üì• –°–∫–∞—á–∞—Ç—å: https://jrsoftware.org/isinfo.php")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
        output_dir = windows_dir / "installer_output"
        output_dir.mkdir(exist_ok=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é
        try:
            print("üî® –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä...")
            result = subprocess.run([
                iscc_path,  # Inno Setup Compiler
                str(iss_file)
            ], capture_output=True, text=True, cwd=str(windows_dir))
            
            if result.returncode == 0:
                print("‚úÖ Windows –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                print(f"üì¶ –§–∞–π–ª: {output_dir / 'FSA-DateStamp-Setup.exe'}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {result.stderr}")
                return False
                
        except FileNotFoundError:
            print("‚ùå Inno Setup Compiler (iscc) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
            return False
    
    def create_inno_setup_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Inno Setup —Å–∫—Ä–∏–ø—Ç–∞"""
        exe_path = self.project_root / "Distrib" / "Windows" / "FSA-DateStamp.exe"
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ –¥–ª—è Inno Setup (1.1.25.249 -> 1.01.25.249)
        version_parts = self.version.split('.')
        if len(version_parts) >= 2 and len(version_parts[1]) == 1:
            version_parts[1] = f"0{version_parts[1]}"
        fixed_version = '.'.join(version_parts)
        
        return f"""[Setup]
AppName=FSA-DateStamp
AppVersion={fixed_version}
AppPublisher=AW-Software
AppPublisherURL=https://github.com/foksserg
AppSupportURL=https://github.com/foksserg
AppUpdatesURL=https://github.com/foksserg
DefaultDirName={{autopf}}\\AW-Software\\FSA-DateStamp
DefaultGroupName=AW-Software\\FSA-DateStamp
AllowNoIcons=yes
LicenseFile=
OutputDir=installer_output
OutputBaseFilename=FSA-DateStamp-Setup
SetupIconFile=
Compression=lzma
SolidCompression=yes
WizardStyle=modern
PrivilegesRequired=admin

[Languages]
Name: "russian"; MessagesFile: "compiler:Languages\\Russian.isl"

[Tasks]
Name: "desktopicon"; Description: "{{cm:CreateDesktopIcon}}"; GroupDescription: "{{cm:AdditionalIcons}}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{{cm:CreateQuickLaunchIcon}}"; GroupDescription: "{{cm:AdditionalIcons}}"; Flags: unchecked; OnlyBelowVersion: 6.1

[Files]
Source: "{exe_path}"; DestDir: "{{app}}"; Flags: ignoreversion
Source: "{self.project_root}\\Distrib\\Windows\\*"; DestDir: "{{app}}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{{group}}\\FSA-DateStamp"; Filename: "{{app}}\\FSA-DateStamp.exe"
Name: "{{group}}\\{{cm:UninstallProgram,FSA-DateStamp}}"; Filename: "{{uninstallexe}}"
Name: "{{autodesktop}}\\FSA-DateStamp"; Filename: "{{app}}\\FSA-DateStamp.exe"; Tasks: desktopicon
Name: "{{userappdata}}\\Microsoft\\Internet Explorer\\Quick Launch\\FSA-DateStamp"; Filename: "{{app}}\\FSA-DateStamp.exe"; Tasks: quicklaunchicon

[Run]
Filename: "{{app}}\\FSA-DateStamp.exe"; Description: "{{cm:LaunchProgram,FSA-DateStamp}}"; Flags: nowait postinstall skipifsilent
"""
    
    def check_inno_setup(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Inno Setup"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Inno Setup
        possible_paths = [
            r"C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
            r"C:\Program Files\Inno Setup 6\ISCC.exe",
            r"C:\Program Files (x86)\Inno Setup 5\ISCC.exe",
            r"C:\Program Files\Inno Setup 5\ISCC.exe"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                return path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ PATH
        try:
            result = subprocess.run(["ISCC.exe", "/?"], capture_output=True, text=True)
            return "ISCC.exe" if result.returncode == 0 else False
        except FileNotFoundError:
            return False
    
    def build_macos_installer(self):
        """–°–±–æ—Ä–∫–∞ macOS –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        print("üçé –°–±–æ—Ä–∫–∞ macOS –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞...")
        print("‚ö†Ô∏è macOS –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        print("üìã –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è: PKG, DMG, App Store")
        return False
    
    def build_linux_installer(self):
        """–°–±–æ—Ä–∫–∞ Linux –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        print("üêß –°–±–æ—Ä–∫–∞ Linux –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞...")
        print("‚ö†Ô∏è Linux –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        print("üìã –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è: DEB, RPM, AppImage, Snap")
        return False
    
    def create_portable_version(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
        
        if self.current_os == "windows":
            return self.create_windows_portable()
        elif self.current_os == "darwin":
            return self.create_macos_portable()
        elif self.current_os == "linux":
            return self.create_linux_portable()
        else:
            print(f"‚ùå –ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è {self.current_os} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return False
    
    def create_windows_portable(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Windows –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        windows_dir = self.installer_dir / "Windows"
        output_dir = windows_dir / "installer_output"
        output_dir.mkdir(exist_ok=True)
        
        portable_zip = output_dir / "FSA-DateStamp-Portable.zip"
        source_dir = self.project_root / "Distrib" / "Windows"
        
        try:
            import zipfile
            with zipfile.ZipFile(portable_zip, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for file_path in source_dir.rglob('*'):
                    if file_path.is_file():
                        arcname = file_path.relative_to(source_dir)
                        zipf.write(file_path, arcname)
            
            print(f"‚úÖ –ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {portable_zip}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏: {e}")
            return False
    
    def create_macos_portable(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ macOS –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        print("‚ö†Ô∏è macOS –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return False
    
    def create_linux_portable(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Linux –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        print("‚ö†Ô∏è Linux –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='FSA-DateStamp Installer Builder')
    parser.add_argument('--os', choices=['windows', 'macos', 'linux'], 
                       help='–¶–µ–ª–µ–≤–∞—è –û–° (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∞—è)')
    parser.add_argument('--portable', action='store_true', 
                       help='–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é')
    parser.add_argument('--all', action='store_true', 
                       help='–°–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –û–°')
    
    args = parser.parse_args()
    
    builder = InstallerBuilder()
    
    if args.all:
        # –°–±–æ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö –û–°
        success = True
        for os_name in ['windows', 'macos', 'linux']:
            print(f"\n{'='*60}")
            print(f"–°–±–æ—Ä–∫–∞ –¥–ª—è {os_name.upper()}")
            print(f"{'='*60}")
            if not builder.build_installer(os_name):
                success = False
        return 0 if success else 1
    
    elif args.portable:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        return 0 if builder.create_portable_version() else 1
    
    else:
        # –°–±–æ—Ä–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∏–ª–∏ —Ç–µ–∫—É—â–µ–π –û–°
        return 0 if builder.build_installer(args.os) else 1

if __name__ == "__main__":
    sys.exit(main())
